vb <- veg_bench %>%
distinct(ECO.SITE)
View(vb)
vb <- veg_bench %>%
distinct(ECO.SITE)
td <- tracking %>%
filter(UFOPlots > 0 & PERCENTCOVER == 'DONE') %>%
select(EcologicalSiteId) %>%
filter(! EcologicalSiteId %in% vb$ECO.SITE)
View(vb)
View(vb)
View(td)
View(td)
write.csv(td, '../data/processed/sites2checkforQB.csv')
tracking %>%
filter(UFOPlots > 0 & PERCENTCOVER == 'DONE')
tracking %>%
filter(UFOPlots == 0 & PERCENTCOVER == 'DONE')
tracking %>%
filter(UFOPlots == 0 & PERCENTCOVER == 'DONE') %>%
select(EcologicalSiteId) %>%
filter(! EcologicalSiteId %in% vb$ECO.SITE)
td_non_UFO <- tracking %>%
filter(UFOPlots == 0 & PERCENTCOVER == 'DONE') %>%
select(EcologicalSiteId) %>%
filter(! EcologicalSiteId %in% vb$ECO.SITE)
write.csv(td_non_UFO, '../data/processed/NonUFOsites2checkforQB.csv')
rm(vb, td, veg_bench, tracking)
rm(f,p)
rm(vb, td, veg_bench, tracking, td_non_UFO)
rm(data)
################################################################################
# CLEAN UP THE QUANTITATIVE BENCHMARKS OF VEGETATION COVER BY FUNCTIONAL GROUP
veg_bench <- read.csv(file.path(p, 'raw', f[grep('Quantitative', f)])) %>%
separate(COVER_PRCNT, c('LOWER', 'UPPER'), sep = '-') %>%
rename(ECO.SITE = ECOLOGICAL_SITE) %>%
mutate(UPPER = ifelse(is.na(UPPER), 0, UPPER))  %>%
mutate(COVER_TYPE = str_replace(COVER_TYPE, 'BARGROUND', 'BAREGROUND'),
ECO.SITE = str_replace(ECO.SITE,'R042XB036NM', 'R042BB036NM'))
library(tidyverse)
setwd('/media/sagesteppe/ExternalHD/UFO_ESD_completion/scripts')
p <- '../data'
f <- list.files(file.path(p, 'raw'), pattern = 'csv$')
veg_bench <- read.csv(file.path(p, 'raw', f[grep('Quantitative', f)])) %>%
separate(COVER_PRCNT, c('LOWER', 'UPPER'), sep = '-') %>%
rename(ECO.SITE = ECOLOGICAL_SITE) %>%
mutate(UPPER = ifelse(is.na(UPPER), 0, UPPER))  %>%
mutate(COVER_TYPE = str_replace(COVER_TYPE, 'BARGROUND', 'BAREGROUND'),
ECO.SITE = str_replace(ECO.SITE,'R042XB036NM', 'R042BB036NM'))
write.csv(veg_bench, file.path(p, 'processed', f[grep('Quantitative', f)]), row.names = F)
comm_table <- read.csv(file.path(p, 'raw', f[grep('Production', f)])) %>%
drop_na(PHASE) %>%  # blank lines used in the transcription process for clarity
mutate(
ESD.CODE = str_replace(ESD.CODE, 'R026XY114CO', 'R036XY114CO'),
STATE = str_replace(STATE, 'CURRENT POTENTIAL STATE', 'POTENTIAL'),
STATE = str_replace(STATE, 'REFEENCE|REFERECNE', 'REFERENCE'),
FUNCTIONAL = str_replace(FUNCTIONAL, 'TREES', 'TREE'),
SYMBOL = str_trim(SYMBOL),
SYMBOL = str_to_upper(SYMBOL)) %>%
#separate(PRODUCTION, c('LOWER', 'UPPER'), sep = '-') %>%
rename(LOWER = Lower, UPPER = Upper) %>%
mutate(PHASE.NAME = ifelse(PHASE.NAME == "", PHASE, PHASE.NAME)) %>%
rename(ECO.SITE = ESD.CODE)
tracking <- read.csv(file.path(p, 'raw', f[grep('Transcription', f)])) %>%
mutate(across(.cols = everything(), ~ na_if(.x, ""))) %>%
filter(!NOTES %in% c('duplicate')) %>%
mutate(NAME = str_to_title(NAME))
colnames(tracking) <- c('ECO.SITE', 'PLOTS', 'STATETRANSITION.PRODUCTION',
'ASSOCIATED.SITES', 'QUANTITATIVE.BENCHMARKS', 'ESD.NAME', 'NOTES')
write.csv(tracking, file.path(p, 'processed', f[grep('Transcription', f)]), row.names = F )
original_pts <- st_read(
'/media/sagesteppe/ExternalHD/aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T)
library(sf)
original_pts <- st_read(
'/media/sagesteppe/ExternalHD/aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T)
plottracking <- read.csv(file.path(p, 'raw', f[grep('PlotTracking', f)])) %>%
select(Plot.ID, Panel, STATUS = Plot.Status, Ecological.Site) %>%
rename_all(., .funs = toupper) %>%
mutate(
PANEL = str_to_lower(PANEL),
PLOT.ID = str_trim(str_replace_all(PLOT.ID, '[0-9]{1,3}$',
str_pad(
str_extract(PLOT.ID, '[0-9]{1,3}$'), 3, "left", 0)
)),
STATUS = str_to_upper(STATUS),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE,
'No ecosite listed|Need To find 2018 Ecosites' , 'NEED MATCHED')) %>%
mutate(ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R0356XY445CO', 'R036XY445CO'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R035XY109UT', 'R036XY325CO'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R035XY325CO', 'R036XY445CO'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R035XY326CO', 'R036XY326CO'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R035XY315UT', 'R036XY315UT'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R036XY328UT', 'R036XY328CO'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R035XY316UT', 'R036XY316UT'),
ECOLOGICAL.SITE = str_replace(ECOLOGICAL.SITE, 'R034XY404CO', 'R034BY404CO'),
) %>% # 'R036XY328CO' was drafted out of 'R034BY328CO'
mutate(ECO.SITE = str_extract(ECOLOGICAL.SITE, "R0.*?CO|R0.*?UT|F0.*?CO"),
ECO.SITE = if_else(is.na(ECO.SITE), ECOLOGICAL.SITE, ECO.SITE),
ECO.SITE.MATCHED = str_detect(ECO.SITE, "[0-9]"),
PLOT.ID = str_trim(str_remove(PLOT.ID, 'Note:leave in for now, rejected last year'))) %>%
mutate(STATUS = str_trim(STATUS),
STATUS = if_else(str_detect(STATUS, 'NOT IN TABLET'), 'NOT SAMPLED', STATUS),
STATUS = str_replace(STATUS, 'REJECTION', 'REJECTED')) %>%
select(-ECOLOGICAL.SITE)
plottracking <- plottracking %>%
group_by(PLOT.ID) %>%
distinct(., .keep_all = T)
pair2keep <- plottracking %>%  # These are odd copies
group_by(PLOT.ID) %>%
filter(n() >= 2) %>%
filter(str_detect(STATUS, '^SAMPLED$'))
plottracking <- plottracking %>%
filter(!PLOT.ID %in% pair2keep$PLOT.ID) %>%
bind_rows(., pair2keep)
rejected_over_notsampled <- plottracking %>%
group_by(PLOT.ID) %>%
distinct(., .keep_all = T) %>%
filter(n() >= 2, STATUS == 'REJECTED')
View(rejected_over_notsampled)
plottracking <- plottracking %>%
filter(!PLOT.ID %in% rejected_over_notsampled$PLOT.ID) %>%
bind_rows(., rejected_over_notsampled)
plottracking <- anti_join(original_pts, plottracking, by = c('PLOTID' = 'PLOT.ID')) %>%
select(PLOT.ID = PLOTID, PANEL) %>%
mutate(PANEL = str_to_lower(PANEL)) %>%
mutate(STATUS = 'NOT SAMPLED', ECO.SITE = NA, ECO.SITE.MATCHED = NA) %>%
st_drop_geometry() %>%
bind_rows(., plottracking)
unique(plottracking$ECO.SITE)
write.csv(plottracking, file.path(p, 'processed', 'Plot_Tracking_ESDs.csv'), row.names = F )
rm(plottracking, original_pts, pair2keep, rejected_over_notsampled)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(PantaRhei)
library(grid)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)])) %>%
distinct(ECO.SITE, .keep_all = T) %>%
select(ECO.SITE:QUANTITATIVE.BENCHMARKS, -PLOTS) %>%
mutate(across(.cols = 2:4,  ~ if_else(.x == 'DONE', 1, 0)))
tracking <- read.csv(file.path(pp, f[grep('Tracking', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
tracking_vals <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T) &
ECO.SITE.MATCHED == TRUE) %>%
select(ECO.SITE) %>%
left_join(., transcription, by = 'ECO.SITE')
no.ES <- tracking %>% filter(STATUS == 'SAMPLED' & ECO.SITE.MATCHED == T) %>%
distinct(ECO.SITE) %>% nrow()
bp_sampled <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T) & STATUS == 'SAMPLED') %>%
nrow()
# how many ES mapped to in UFO
esUFO <- tracking_vals %>% group_by(ECO.SITE) %>% count()  # 38 are mapped to
# how many of these ESDS are completed ?
# tracking_vals %>%
#  distinct(ECO.SITE, .keep_all = T) %>%
#  count(STATETRANSITION.PRODUCTION) # portions of at least 23 are complete.
# how many of the plots do these represent
bp_w_ESD <- nrow(tracking_vals) # 155 base plots have ESDS
bp_sampled <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T), str_detect(STATUS, '^SAMPLED')) %>% nrow()
# 206 of the BASE Plots are completed
plots_sampled <- tracking %>% nrow()
# 279 plots were sampled
esUFO %>%
ggplot(aes(x = fct_rev(fct_reorder(ECO.SITE, n)), y = n)) +
geom_count(show.legend = F) + # or geom_count()
labs(x = NULL, y = 'Number of Plots', title = 'Number of AIM plots per ESD') +
theme_classic() +
ylim(0,20) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_blank(),
plot.title = element_text(hjust = 0.5))
View(tracking_vals)
rm(no.ES, esUFO, bp_sampled)
base_plots <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T))
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(QUANTITATIVE.BENCHMARKS = 1)
op <- base_plots %>%
select(-PANEL, -PLOT.ID) %>%
left_join(., transcription, by = 'ECO.SITE') %>%
select(-QUANTITATIVE.BENCHMARKS) %>%
left_join(., benchmarks, by = 'ECO.SITE')  %>%
mutate(ECO.SITE.MATCHED = replace_na(ECO.SITE.MATCHED, FALSE),
ECO.SITE.MATCHED = if_else(ECO.SITE.MATCHED == T, 1, 0),
BASE.PLOTS = 1,
STATUS = if_else(STATUS == 'SAMPLED', 1, 0)) %>%
mutate(across(STATETRANSITION.PRODUCTION:QUANTITATIVE.BENCHMARKS, ~ replace_na(.x, 0))) %>%
select(-ECO.SITE, SAMPLED = STATUS) %>%
colSums()
top <- sort(op, decreasing = T)
bottom = 255 - top
names(bottom) <- NULL
names(top) <- NULL
loss <- vector(mode = "numeric", length = length(bottom))
for(i in seq(loss)) {loss[i] <-  bottom[i + 1] - bottom[i] }
loss <- loss[1:length(loss)-1]
evenLETTERS <- LETTERS[1:26 %% 2 == 0]
oddLETTERS <- LETTERS[1:26 %% 2 != 0]
evenLETTERS <- c('A', evenLETTERS) # deal with eccentricities involving A
evenLETTERS <- evenLETTERS[1:6]
oddLETTERS <- oddLETTERS[2:6]
from = sort(c(rep(evenLETTERS[1:length(evenLETTERS)-1], each = 2),
rep(oddLETTERS[1:length(oddLETTERS)-1], each = 1)))
to = sort( c('C', rep(oddLETTERS[2:length(oddLETTERS)], each = 2),
rep(evenLETTERS[2:length(evenLETTERS)], each = 1)))
top <- top[2:length(top)]
bottom <- bottom[2:(length(bottom)-1)]
quantity <- c(
top[1], bottom[1], top[2], loss[1], bottom[1],
top[3], loss[3], bottom[2], top[4], loss[4],
bottom[3], top[5], loss[5], bottom[4]
)
df = data.frame(from, to, quantity)
nodes <- data.frame(
ID = LETTERS[1:11],
label = c('Plots', 'Sampled', '', 'ES', '', 'ESD',  '',
'Similar', '', 'Benchmarks', 'Benchmarks'),
x = c(1, rep(2:6, each = 2)), y = c(2, rep(c(2,1), times = 5)),
label_pos = c('above', rep(c('above', 'below'), times = 5))
)
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
rm(colors, ns, nodes, top, bottom, quantity, evenLETTERS, oddLETTERS, df, i, loss, op, to, from, base_plots)
sankey
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
nodes <- data.frame(
ID = LETTERS[1:11],
label = c('Plots', 'Sampled', '', 'ES', '', 'ESD',  '',
'Similar', '', 'Benchmarks', 'Benchmarks'),
x = c(1, rep(2:6, each = 2)), y = c(2, rep(c(2,1), times = 5)),
label_pos = c('above', rep(c('above', 'below'), times = 5))
)
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(PantaRhei)
library(grid)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)])) %>%
distinct(ECO.SITE, .keep_all = T) %>%
select(ECO.SITE:QUANTITATIVE.BENCHMARKS, -PLOTS) %>%
mutate(across(.cols = 2:4,  ~ if_else(.x == 'DONE', 1, 0)))
tracking <- read.csv(file.path(pp, f[grep('Tracking', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
tracking_vals <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T) &
ECO.SITE.MATCHED == TRUE) %>%
select(ECO.SITE) %>%
left_join(., transcription, by = 'ECO.SITE')
no.ES <- tracking %>% filter(STATUS == 'SAMPLED' & ECO.SITE.MATCHED == T) %>%
distinct(ECO.SITE) %>% nrow()
bp_sampled <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T) & STATUS == 'SAMPLED') %>%
nrow()
# how many ES mapped to in UFO
esUFO <- tracking_vals %>% group_by(ECO.SITE) %>% count()  # 38 are mapped to
# how many of these ESDS are completed ?
# tracking_vals %>%
#  distinct(ECO.SITE, .keep_all = T) %>%
#  count(STATETRANSITION.PRODUCTION) # portions of at least 23 are complete.
# how many of the plots do these represent
bp_w_ESD <- nrow(tracking_vals) # 155 base plots have ESDS
bp_sampled <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T), str_detect(STATUS, '^SAMPLED')) %>% nrow()
# 206 of the BASE Plots are completed
plots_sampled <- tracking %>% nrow()
# 279 plots were sampled
esUFO %>%
ggplot(aes(x = fct_rev(fct_reorder(ECO.SITE, n)), y = n)) +
geom_count(show.legend = F) + # or geom_count()
labs(x = NULL, y = 'Number of Plots', title = 'Number of AIM plots per ESD') +
theme_classic() +
ylim(0,20) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_blank(),
plot.title = element_text(hjust = 0.5))
rm(no.ES, esUFO, bp_sampled)
base_plots <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T))
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(QUANTITATIVE.BENCHMARKS = 1)
op <- base_plots %>%
select(-PANEL, -PLOT.ID) %>%
left_join(., transcription, by = 'ECO.SITE') %>%
select(-QUANTITATIVE.BENCHMARKS) %>%
left_join(., benchmarks, by = 'ECO.SITE')  %>%
mutate(ECO.SITE.MATCHED = replace_na(ECO.SITE.MATCHED, FALSE),
ECO.SITE.MATCHED = if_else(ECO.SITE.MATCHED == T, 1, 0),
BASE.PLOTS = 1,
STATUS = if_else(STATUS == 'SAMPLED', 1, 0)) %>%
mutate(across(STATETRANSITION.PRODUCTION:QUANTITATIVE.BENCHMARKS, ~ replace_na(.x, 0))) %>%
select(-ECO.SITE, SAMPLED = STATUS) %>%
colSums()
top <- sort(op, decreasing = T)
bottom = 255 - top
names(bottom) <- NULL
names(top) <- NULL
loss <- vector(mode = "numeric", length = length(bottom))
for(i in seq(loss)) {loss[i] <-  bottom[i + 1] - bottom[i] }
loss <- loss[1:length(loss)-1]
evenLETTERS <- LETTERS[1:26 %% 2 == 0]
oddLETTERS <- LETTERS[1:26 %% 2 != 0]
evenLETTERS <- c('A', evenLETTERS) # deal with eccentricities involving A
evenLETTERS <- evenLETTERS[1:6]
oddLETTERS <- oddLETTERS[2:6]
from = sort(c(rep(evenLETTERS[1:length(evenLETTERS)-1], each = 2),
rep(oddLETTERS[1:length(oddLETTERS)-1], each = 1)))
to = sort( c('C', rep(oddLETTERS[2:length(oddLETTERS)], each = 2),
rep(evenLETTERS[2:length(evenLETTERS)], each = 1)))
top <- top[2:length(top)]
bottom <- bottom[2:(length(bottom)-1)]
quantity <- c(
top[1], bottom[1], top[2], loss[1], bottom[1],
top[3], loss[3], bottom[2], top[4], loss[4],
bottom[3], top[5], loss[5], bottom[4]
)
df = data.frame(from, to, quantity)
nodes <- data.frame(
ID = LETTERS[1:11],
label = c('Plots', 'Sampled', '', 'ES', '', 'ESD',  '',
'Similar', '', 'Benchmarks', 'Benchmarks'),
x = c(1, rep(2:6, each = 2)), y = c(2, rep(c(2,1), times = 5)),
label_pos = c('above', rep(c('above', 'below'), times = 5))
)
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
rm(colors, ns, nodes, top, bottom, quantity, evenLETTERS, oddLETTERS, df, i, loss, op, to, from, base_plots)
base_plots <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T))
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(QUANTITATIVE.BENCHMARKS = 1)
op <- base_plots %>%
select(-PANEL, -PLOT.ID) %>%
left_join(., transcription, by = 'ECO.SITE') %>%
select(-QUANTITATIVE.BENCHMARKS) %>%
left_join(., benchmarks, by = 'ECO.SITE')  %>%
mutate(ECO.SITE.MATCHED = replace_na(ECO.SITE.MATCHED, FALSE),
ECO.SITE.MATCHED = if_else(ECO.SITE.MATCHED == T, 1, 0),
BASE.PLOTS = 1,
STATUS = if_else(STATUS == 'SAMPLED', 1, 0)) %>%
mutate(across(STATETRANSITION.PRODUCTION:QUANTITATIVE.BENCHMARKS, ~ replace_na(.x, 0))) %>%
select(-ECO.SITE, SAMPLED = STATUS) %>%
colSums()
top <- sort(op, decreasing = T)
bottom = 255 - top
names(bottom) <- NULL
names(top) <- NULL
loss <- vector(mode = "numeric", length = length(bottom))
for(i in seq(loss)) {loss[i] <-  bottom[i + 1] - bottom[i] }
loss <- loss[1:length(loss)-1]
evenLETTERS <- LETTERS[1:26 %% 2 == 0]
oddLETTERS <- LETTERS[1:26 %% 2 != 0]
evenLETTERS <- c('A', evenLETTERS) # deal with eccentricities involving A
evenLETTERS <- evenLETTERS[1:6]
oddLETTERS <- oddLETTERS[2:6]
from = sort(c(rep(evenLETTERS[1:length(evenLETTERS)-1], each = 2),
rep(oddLETTERS[1:length(oddLETTERS)-1], each = 1)))
to = sort( c('C', rep(oddLETTERS[2:length(oddLETTERS)], each = 2),
rep(evenLETTERS[2:length(evenLETTERS)], each = 1)))
top <- top[2:length(top)]
bottom <- bottom[2:(length(bottom)-1)]
quantity <- c(
top[1], bottom[1], top[2], loss[1], bottom[1],
top[3], loss[3], bottom[2], top[4], loss[4],
bottom[3], top[5], loss[5], bottom[4]
)
df = data.frame(from, to, quantity)
nodes <- data.frame(
ID = LETTERS[1:11],
label = c('Plots', 'Sampled', '', 'ES', '', 'ESD',  '',
'Similar', '', 'Benchmarks', 'Benchmarks'),
x = c(1, rep(2:6, each = 2)), y = c(2, rep(c(2,1), times = 5)),
label_pos = c('above', rep(c('above', 'below'), times = 5))
)
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(PantaRhei)
library(grid)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)])) %>%
distinct(ECO.SITE, .keep_all = T) %>%
select(ECO.SITE:QUANTITATIVE.BENCHMARKS, -PLOTS) %>%
mutate(across(.cols = 2:4,  ~ if_else(.x == 'DONE', 1, 0)))
tracking <- read.csv(file.path(pp, f[grep('Tracking', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
tracking_vals <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T) &
ECO.SITE.MATCHED == TRUE) %>%
select(ECO.SITE) %>%
left_join(., transcription, by = 'ECO.SITE')
no.ES <- tracking %>% filter(STATUS == 'SAMPLED' & ECO.SITE.MATCHED == T) %>%
distinct(ECO.SITE) %>% nrow()
bp_sampled <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T) & STATUS == 'SAMPLED') %>%
nrow()
# how many ES mapped to in UFO
esUFO <- tracking_vals %>% group_by(ECO.SITE) %>% count()  # 38 are mapped to
# how many of these ESDS are completed ?
# tracking_vals %>%
#  distinct(ECO.SITE, .keep_all = T) %>%
#  count(STATETRANSITION.PRODUCTION) # portions of at least 23 are complete.
# how many of the plots do these represent
bp_w_ESD <- nrow(tracking_vals) # 155 base plots have ESDS
bp_sampled <- tracking %>% filter(str_detect(PANEL, 'oversample', negate = T), str_detect(STATUS, '^SAMPLED')) %>% nrow()
# 206 of the BASE Plots are completed
plots_sampled <- tracking %>% nrow()
# 279 plots were sampled
esUFO %>%
ggplot(aes(x = fct_rev(fct_reorder(ECO.SITE, n)), y = n)) +
geom_count(show.legend = F) + # or geom_count()
labs(x = NULL, y = 'Number of Plots', title = 'Number of AIM plots per ESD') +
theme_classic() +
ylim(0,20) +
theme(
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.line.y.left = element_blank(),
axis.line.x.bottom = element_blank(),
plot.title = element_text(hjust = 0.5))
View(esUFO)
rm(no.ES, esUFO, bp_sampled)
base_plots <- tracking %>%
filter(str_detect(PANEL, 'oversample', negate = T))
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(QUANTITATIVE.BENCHMARKS = 1)
op <- base_plots %>%
select(-PANEL, -PLOT.ID) %>%
left_join(., transcription, by = 'ECO.SITE') %>%
select(-QUANTITATIVE.BENCHMARKS) %>%
left_join(., benchmarks, by = 'ECO.SITE')  %>%
mutate(ECO.SITE.MATCHED = replace_na(ECO.SITE.MATCHED, FALSE),
ECO.SITE.MATCHED = if_else(ECO.SITE.MATCHED == T, 1, 0),
BASE.PLOTS = 1,
STATUS = if_else(STATUS == 'SAMPLED', 1, 0)) %>%
mutate(across(STATETRANSITION.PRODUCTION:QUANTITATIVE.BENCHMARKS, ~ replace_na(.x, 0))) %>%
select(-ECO.SITE, SAMPLED = STATUS) %>%
colSums()
top <- sort(op, decreasing = T)
bottom = 255 - top
names(bottom) <- NULL
names(top) <- NULL
loss <- vector(mode = "numeric", length = length(bottom))
for(i in seq(loss)) {loss[i] <-  bottom[i + 1] - bottom[i] }
loss <- loss[1:length(loss)-1]
evenLETTERS <- LETTERS[1:26 %% 2 == 0]
oddLETTERS <- LETTERS[1:26 %% 2 != 0]
evenLETTERS <- c('A', evenLETTERS) # deal with eccentricities involving A
evenLETTERS <- evenLETTERS[1:6]
oddLETTERS <- oddLETTERS[2:6]
from = sort(c(rep(evenLETTERS[1:length(evenLETTERS)-1], each = 2),
rep(oddLETTERS[1:length(oddLETTERS)-1], each = 1)))
to = sort( c('C', rep(oddLETTERS[2:length(oddLETTERS)], each = 2),
rep(evenLETTERS[2:length(evenLETTERS)], each = 1)))
top <- top[2:length(top)]
bottom <- bottom[2:(length(bottom)-1)]
quantity <- c(
top[1], bottom[1], top[2], loss[1], bottom[1],
top[3], loss[3], bottom[2], top[4], loss[4],
bottom[3], top[5], loss[5], bottom[4]
)
df = data.frame(from, to, quantity)
nodes <- data.frame(
ID = LETTERS[1:11],
label = c('Plots', 'Sampled', '', 'ES', '', 'ESD',  '',
'Similar', '', 'Benchmarks', 'Benchmarks'),
x = c(1, rep(2:6, each = 2)), y = c(2, rep(c(2,1), times = 5)),
label_pos = c('above', rep(c('above', 'below'), times = 5))
)
colors <- data.frame(substance = "<any>", color = "#008083")
ns <- list(type="arrow", gp=gpar(fill="#FD5901", col="white", lwd=4), mag_pos = 'label', mag_fmt="%.0f")
sankey(nodes, flows = df, node_style=ns, legend=F, colors, title = "Number of base plots which have Quantitative Benchmarks")
rm(colors, ns, nodes, top, bottom, quantity, evenLETTERS, oddLETTERS, df, i, loss, op, to, from, base_plots)

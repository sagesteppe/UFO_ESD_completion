left_join(UFOcal, production, by = 'ECO.SITE')
left_join(UFOcal, benchmarks, by = 'ECO.SITE')
left_join(UFOcal, production, by = 'ECO.SITE')
UFOcal <- left_join(UFOcal, stateTransition, by = 'ECO.SITE')
UFOcal <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE')
View(UFOcal)
library(tidyverse)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
# how many ES mapped to in UFO
filter(transcription, PLOTS >= 1) # 34
# how many of these ES are completed
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') # 17 are done , 17 are missing
# how many of the plots do these represent
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') %>% summarize(PlotESD = sum(PLOTS)) # 97 plots have ESD's
filter(transcription, PLOTS >= 1) %>% summarize(PlotsTotal = sum(PLOTS)) # 121 plots total have been completed.
UFOcal <- filter(transcription, PLOTS >= 1) %>% select(ECO.SITE:STATETRANSITION.PRODUCTION)
stateTransition <- stateTransition %>%
distinct(ECO.SITE) %>%
drop_na() %>%  # need to fix this.. how it do.
mutate(StateTransition = 100)
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 100)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 100)
UFOcal <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE')
library(tidyverse)
setwd('/media/sagesteppe/ExternalHD/UFO_ESD_completion/scripts')
p <- '../data'
f <- list.files(file.path(p, 'raw'), pattern = 'csv$')
################################################################################
# CLEAN UP THE QUANTITATIVE BENCHMARKS OF VEGETATION COVER BY FUNCTIONAL GROUP
veg_bench <- read.csv(file.path(p, 'raw', f[grep('Quantitative', f)])) %>%
separate(COVER_PRCNT, c('LOWER', 'UPPER'), sep = '-') %>%
mutate(UPPER = ifelse(is.na(UPPER), 0, UPPER))  %>%
mutate(COVER_TYPE = str_replace(COVER_TYPE, 'BARGROUND', 'BAREGROUND')) %>%
rename(ECO.SITE = ECOLOGICAL_SITE)
write.csv(veg_bench, file.path(p, 'processed', f[grep('Quantitative', f)]), row.names = F)
rm(veg_bench)
################################################################################
# CLEAN UP THE QUASI-HOPEFULLY ORDERED PLANT COVERS BY FUNCTIONAL GROUP
veg_states <- read.csv(file.path(p, 'raw', f[grep('Ordered', f)])) %>%
mutate(across(.cols = everything(), ~ str_trim(.x))) %>%
mutate(across(where(is.character), ~na_if(., ""))) %>%
mutate(STATE = str_remove(STATE, ' STATE'),
STATE = str_replace(STATE, 'DEDPAUPERATE', 'DEPAUPERATE')
) %>%
mutate(VEG = str_replace(VEG, 'HERB.$', 'FORB'),
VEG = str_replace(VEG, 'FOBR|FORBS', 'FORB'),
VEG = str_replace(VEG, 'PERENNIAL FORB', 'PF'),
VEG = str_replace(VEG, 'SHRUBS', 'SHRUB'),
VEG = str_replace(VEG, 'TREES|TREE', 'TR'),
VEG = str_replace(VEG, 'PERENNIAL GRASSES|PERENNIAL GRASS', 'PG'),
VEG = str_replace(VEG, 'PERENNIAL SHRUB|SHRUB', 'SH'),
VEG = str_replace(VEG, 'TORREY MORMONTEA|TORREYS JOINTFIR', 'EPTO'),
VEG = str_replace(VEG, 'MORMONTEA', 'EPHEDRA'),
VEG = str_replace(VEG, 'GALLETA|JAMES GALLETA', 'PLJA'),
VEG = str_replace(VEG, 'INDIAN RICEGRASS|AHCY', 'ACHY'),
VEG = str_replace(VEG, 'CHEATGRASS', 'BRTE'),
VEG = str_replace(VEG, 'BLUE GRAMA', 'BOGR2'),
VEG = str_replace(VEG, 'BOTTLEBRUSH SQUIRRELTAIL|SQUIRRELTAIL', 'ELE5'),
VEG = str_replace(VEG, 'BASIN WILDRYE', 'LECI4'),
VEG = str_replace(VEG, 'SALINA WILDRYE', 'LESAS'),
VEG = str_replace(VEG, 'NEEDLE AND THREAD', 'HECO26'),
VEG = str_replace(VEG, 'MUTTONGRASS', 'POFE'),
VEG = str_replace(VEG, 'ALKALI SACATON', 'SPAI'),
VEG = str_replace(VEG, 'SALTGRASS', 'DISP'),
VEG = str_replace(VEG, 'WESTERN WHEATGRASS', 'PASM'),
VEG = str_replace(VEG, 'NEBRASKA SEDGE', 'CANE2'),
VEG = str_replace(VEG, 'SEDGES', 'CAREX'),
VEG = str_replace(VEG, 'RUSHES', 'JUNCUS'),
VEG = str_replace(VEG, 'GRASSES', 'GRASS'),
VEG = str_replace(VEG, 'HALOGETON', 'HAGL'),
VEG = str_replace(VEG, 'BROOMSNAKEWEED|SNAKEWEED', 'GUSA'),
VEG = str_replace(VEG, 'WINTERFAT', 'KRLA'),
VEG = str_replace(VEG, 'FOURWING SALTBUSH', 'ATCA2'),
VEG = str_replace(VEG, 'YELLOW RABBITBRUSH|RABBITBRUSH', 'CHVI8'),
VEG = str_replace(VEG, 'IODINEBUSH', 'ALOC2'),
VEG = str_replace(VEG, 'BLACKBRUSH', 'CORA'),
VEG = str_replace(VEG, 'SHADSCALE|SHADCALE', 'ATCO'),
VEG = str_replace(VEG, 'ALDERLEAD MT. MAHOGANY', 'CEMO2'),
VEG = str_replace(VEG, 'BLACK SAGEBRUSH', 'ARNO4'),
VEG = str_replace(VEG, 'BIGELOWS SAGEBRUSH', 'ARBI3'),
VEG = str_replace(VEG, 'MAT SALTBUSH', 'ATCO4'),
VEG = str_replace(VEG, 'BASIN BIG SAGEBRUSH', 'ARTRT'),
VEG = str_replace(VEG, 'WYOMING BIG SAGE|BIG SAGEBRUSH|ARTW8', 'ARTRW8'),
VEG = str_replace(VEG, 'BUD SAGEBRUSH', 'PIDE4'),
VEG = str_replace(VEG, 'PINYON JUNIPER|PINYON-JUNIPER', 'PJ'),
VEG = str_replace(VEG, 'TWONEEDLE PINYON|TWO-NEEDLE PINYON|TWO NEEDLE PINYON|PINYON', 'PIED'),
VEG = str_replace(VEG, 'UTAH JUNIPER', 'JUOS'),
VEG = str_replace(VEG, 'INVASIVES|INVASIVE', 'NOXIOUS'),
VEG = str_replace(VEG, 'ANNUAL NON-NATIVES', 'ANNUAL NON-NATIVE'),
VEG = str_replace(VEG, 'ANNUAL NOXIOUS|NOXIOUS ANNUALS', 'NOXIOUS ANNUAL')
) %>%
rename(ECO.SITE = ESD.CODE)
# sort(unique(veg_states$VEG))
veg_states <- veg_states %>%
mutate(STATE = str_remove(STATE, ' STATE'),
STATE = str_trim(STATE),
STATE = str_replace(STATE, 'DEDPAUPERATE', 'DEPAUPERATE'),
STATE = str_replace(STATE, 'REFEENCE', 'REFERENCE'),
STATE = str_replace(STATE, 'PJ', 'PINYON-JUNIPER'),
STATE = str_replace(STATE, '^POTENTIAL', 'CURRENT POTENTIAL'))
veg_states <- veg_states %>%
mutate(PHASE.NAME = str_trim(PHASE.NAME),
PHASE.NAME = str_replace(PHASE.NAME, 'PERENNAIL|PERRENIAL', 'PERENNIAL'),
PHASE.NAME = str_replace(PHASE.NAME, 'WOODALND', 'WOODLAND'),
PHASE.NAME = str_replace(PHASE.NAME, 'INVASIVE ANNUALS', 'INVASIVE ANNUAL'),
PHASE.NAME = str_replace(PHASE.NAME, 'JUNIPER ENCHROACHMENT', 'JUNIPER ENCROACHMENT'),
PHASE.NAME = str_replace(PHASE.NAME, 'SHRULAND', 'SHRUBLAND'),
PHASE.NAME = str_replace(PHASE.NAME,
'TWONEEDLE PINYON, UTAH JUNIPER|UTAH JUNIPER, TWO-NEEDLE PINYON|PINYON-JUNIPER', 'PJ'),
PHASE.NAME = str_replace(PHASE.NAME,
'PJ WOODLAND WITH INVASIVE PLANTS', 'PJ WOODLAND WITH INVASIVE SPECIES'),
PHASE.NAME = str_replace(PHASE.NAME, 'W/', 'WITH')
) # SHRULAND
write.csv(veg_states, file.path(p, 'processed', f[grep('Ordered', f)]),  row.names = F)
rm(veg_states)
##################################################################################
# CLEAN UP THE PRODUCTION VALUES TABLES.
comm_table <- read.csv(file.path(p, 'raw', f[grep('Production', f)])) %>%
drop_na(PHASE) %>%  # blank lines used in the transcription process for clarity
mutate(
ESD.CODE = str_replace(ESD.CODE, 'R026XY114CO', 'R036XY114CO'),
STATE = str_replace(STATE, 'CURRENT POTENTIAL STATE', 'POTENTIAL'),
STATE = str_replace(STATE, 'REFEENCE|REFERECNE', 'REFERENCE'),
FUNCTIONAL = str_replace(FUNCTIONAL, 'TREES', 'TREE'),
SYMBOL = str_trim(SYMBOL),
SYMBOL = str_to_upper(SYMBOL)) %>%
#separate(PRODUCTION, c('LOWER', 'UPPER'), sep = '-') %>%
rename(LOWER = Lower, UPPER = Upper) %>%
mutate(PHASE.NAME = ifelse(PHASE.NAME == "", PHASE, PHASE.NAME)) %>%
rename(ECO.SITE = ESD.CODE)
# UPDATE ALL PLANTS WHICH 'ARE' MISSING FROM THE USDA LIST, THESE TYPOS.
USDA_pls_codes <- read.csv(file.path(p, 'raw', f[grep('reference', f)]))
comm_tab2 <- comm_table %>%
filter(SYMBOL %in% USDA_pls_codes$Synonym.Symbol)
comm_table <- comm_table %>%
mutate(
SYMBOL = str_replace(SYMBOL, 'SYRO2', 'SYRO'),
SYMBOL = str_replace(SYMBOL, 'COWR7|COWR4$', 'COWR2'),
SYMBOL = str_replace(SYMBOL, 'PESH', 'PEWH'),
SYMBOL = str_replace(SYMBOL, 'ERRA$', 'ERRA3'))
rm(comm_tab2)
trouble <- comm_table %>%  # update all codes to appropriate synonyms here.
filter(!SYMBOL %in% USDA_pls_codes$Symbol)
comm_table <- comm_table %>%
mutate(SYMBOL =  str_replace(SYMBOL, 'GUA', 'GUSA'),
SYMBOL =  str_replace(SYMBOL, 'ATC0', 'ATCO'),
SYMBOL =  str_replace(SYMBOL, 'ATRW8', 'ARTRW8'),
SYMBOL =  str_replace(SYMBOL, 'CRGR2$|CRGR$', 'CRGR3'),
SYMBOL =  str_replace(SYMBOL, 'PERA 4', 'PERA4'),
SYMBOL =  str_replace(SYMBOL, 'ARNAN5', 'ERNA10'),
SYMBOL =  str_replace(SYMBOL, 'ELE5', 'ELEL5'),
SYMBOL =  str_replace(SYMBOL, 'ARNO$', 'ARNO4'),
SYMBOL =  str_replace(SYMBOL, 'SRBI3', 'ARBI3'),
SYMBOL =  str_replace(SYMBOL, 'PIDE$', 'PIDE4'),
SYMBOL =  str_replace(SYMBOL, 'TRLD', 'TRLO'),
SYMBOL =  str_replace(SYMBOL, 'PPHO', 'PHLO'),
SYMBOL =  str_replace(SYMBOL, 'OXYTRE', 'OXYTR'),
SYMBOL =  str_replace(SYMBOL, 'ERISH', 'ERSH'),
SYMBOL =  str_replace(SYMBOL, '2FA', 'AF'),
SYMBOL =  str_replace(SYMBOL, '2FP', 'PF'),
SYMBOL =  str_replace(SYMBOL, '2GA', 'AG'),
SYMBOL =  str_replace(SYMBOL, '2GP', 'PG'),
SYMBOL =  str_replace(SYMBOL, '2GRAM', 'GRAM'),
SYMBOL =  str_replace(SYMBOL, '2SHRUB', 'SH'),
)
write.csv(comm_table, file.path(p, 'processed', f[grep('Production', f)]), row.names = F )
rm(comm_table, trouble, USDA_pls_codes)
################################################################################
# TRANSCRIPTION TRACKING SHEET
tracking <- read.csv(file.path(p, 'raw', f[grep('Transcription', f)])) %>%
mutate(across(.cols = everything(), ~ na_if(.x, ""))) %>%
filter(!NOTES %in% c('duplicate')) %>%
mutate(NAME = str_to_title(NAME))
colnames(tracking) <- c('ECO.SITE', 'PLOTS', 'STATETRANSITION.PRODUCTION',
'ASSOCIATED.SITES', 'QUANTITATIVE.BENCHMARKS', 'ESD.NAME', 'NOTES')
write.csv(tracking, file.path(p, 'processed', f[grep('Transcription', f)]), row.names = F )
rm(tracking)
library(tidyverse)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
# how many ES mapped to in UFO
filter(transcription, PLOTS >= 1) # 34
# how many of these ES are completed
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') # 17 are done , 17 are missing
# how many of the plots do these represent
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') %>% summarize(PlotESD = sum(PLOTS)) # 97 plots have ESD's
filter(transcription, PLOTS >= 1) %>% summarize(PlotsTotal = sum(PLOTS)) # 121 plots total have been completed.
UFOcal <- filter(transcription, PLOTS >= 1) %>% select(ECO.SITE:STATETRANSITION.PRODUCTION)
stateTransition <- stateTransition %>%
distinct(ECO.SITE) %>%
drop_na() %>%  # need to fix this.. how it do.
mutate(StateTransition = 100)
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 100)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 100)
UFOcal <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE')
View(UFOcal)
View(UFOcal)
UFOcal <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
library(tidyverse)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
# how many ES mapped to in UFO
filter(transcription, PLOTS >= 1) # 34
# how many of these ES are completed
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') # 17 are done , 17 are missing
# how many of the plots do these represent
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') %>% summarize(PlotESD = sum(PLOTS)) # 97 plots have ESD's
filter(transcription, PLOTS >= 1) %>% summarize(PlotsTotal = sum(PLOTS)) # 121 plots total have been completed.
UFOcal <- filter(transcription, PLOTS >= 1) %>% select(ECO.SITE:STATETRANSITION.PRODUCTION)
stateTransition <- stateTransition %>%
distinct(ECO.SITE) %>%
drop_na() %>%  # need to fix this.. how it do.
mutate(StateTransition = 100)
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 100)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 100)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
View(transcription)
View(statusHEATMAP)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
27/100
?scale
x <- matrix(1:10, ncol = 2)
x
scale(x)
scale(x, scale = 1:100)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION)
heatmap(statusHEATMAP, scale="column")
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
column_to_rownames(ECO.SITE)
?column_to_rownames
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
column_to_rownames('ECO.SITE')
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
rm(pp, f)
View(UFOcal)
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
pp <- '../data/processed'
f <- list.files(pp, pattern = 'csv')
transcription <- read.csv(file.path(pp, f[grep('Transcription', f)]))
benchmarks <- read.csv(file.path(pp, f[grep('Quantitative', f)]))
production <- read.csv(file.path(pp, f[grep('Production', f)]))
stateTransition <- read.csv(file.path(pp, f[grep('Ordered', f )]))
View(transcription)
transcription[c(1:19,21:86)]
transcription[,c(1:19,21:86)]
transcription[c(1:19,21:86),]
transcription <- transcription[c(1:19,21:86),]
# how many ES mapped to in UFO
filter(transcription, PLOTS >= 1) # 34
# how many of these ES are completed
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') # 17 are done , 17 are missing
# how many of the plots do these represent
filter(transcription, PLOTS >= 1 & STATETRANSITION.PRODUCTION == 'DONE') %>% summarize(PlotESD = sum(PLOTS)) # 97 plots have ESD's
filter(transcription, PLOTS >= 1) %>% summarize(PlotsTotal = sum(PLOTS)) # 121 plots total have been completed.
UFOcal <- filter(transcription, PLOTS >= 1) %>% select(ECO.SITE:STATETRANSITION.PRODUCTION)
stateTransition <- stateTransition %>%
distinct(ECO.SITE) %>%
drop_na() %>%  # need to fix this.. how it do.
mutate(StateTransition = 100)
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 100)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 100)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
column_to_rownames('ECO.SITE')
heatmap(statusHEATMAP, scale="column")
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
column_to_rownames('ECO.SITE') %>%
as.matrix()
heatmap(statusHEATMAP, scale="column")
View(statusHEATMAP)
heatmap(statusHEATMAP, scale="column")
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
column_to_rownames('ECO.SITE') %>%
rename(Plots = PLOTS) %>%
as.matrix()
heatmap(statusHEATMAP, scale="column")
x <- LETTERS[1:20]
y <- paste0("var", seq(1,20))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
View(data)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
rename(Plots = PLOTS)
?pivot_longer
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(TABLE, ECO.SITE, fill= Value)) +
geom_tile()
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile()
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_raster()
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3)
?scale
?rescale
rescalce(34, to = 100, from = 1)
rescale(34, to = 100, from = 1)
scales::rescale(34, to = 100, from = 1)
scales::rescale(102, to = 100, from = 1)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
mutate(PLOTS = scales::rescale(PLOTS, to = 100, from = 1)) %>%
select(-STATETRANSITION.PRODUCTION) %>%
rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3)
View(statusHEATMAP)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) #%>%
View(statusHEATMAP)
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
library(tidyverse)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
View(statusHEATMAP)
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
#mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION) %>%
#rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
#mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION, -PLOTS) %>%
#rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3)
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3) +
scale_fill_gradientn(colours = c("white", "green", "red"), values = c(0,1,100))
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 1)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 1)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
#mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION, -PLOTS) %>%
#rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3) +
scale_fill_gradientn(colours = c("red", "green", "red"), values = c(0,0.1,1))
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3) +
scale_fill_gradientn(colours = c("red", "green", "red"), values = c(0,0.5,1))
View(statusHEATMAP)
stateTransition <- stateTransition %>%
distinct(ECO.SITE) %>%
drop_na() %>%  # need to fix this.. how it do.
mutate(StateTransition = 1)
benchmarks <- benchmarks %>%
distinct(ECO.SITE) %>%
mutate(Benchmark = 1)
production <- production %>%
distinct(ECO.SITE) %>%
mutate(Production = 1)
statusHEATMAP <- left_join(UFOcal, stateTransition, by = 'ECO.SITE') %>%
left_join(., production, by = 'ECO.SITE') %>%
left_join(., benchmarks, by = 'ECO.SITE') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))) %>%
#mutate(PLOTS = scales::rescale(PLOTS, to = c(1,100))) %>%
select(-STATETRANSITION.PRODUCTION, -PLOTS) %>%
#rename(Plots = PLOTS) %>%
pivot_longer(!ECO.SITE, names_to = 'Table', values_to = 'Value')
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3) +
scale_fill_gradientn(colours = c("red", "green", "red"), values = c(0,0.5,1))
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=4/3) +
scale_fill_gradientn(colours = c("red", "yellow", "green"), values = c(0,0.5,1))
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
theme(aspect.ratio=5/3) +
scale_fill_gradientn(colours = c("red", "yellow", "green"), values = c(0,0.5,1))
ggplot(statusHEATMAP, aes(Table, ECO.SITE, fill= Value)) +
geom_tile() +
scale_fill_gradientn(colours = c("red", "yellow", "green"), values = c(0,0.5,1)) +
theme(aspect.ratio=5/3)
